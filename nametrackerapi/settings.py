"""
Django settings for nametrackerapi project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
import os
import json
from dotenv import load_dotenv
import logging
from logging.handlers import RotatingFileHandler


# Load environment variables from .env file
load_dotenv()

# Helper function to parse environment variables that contain multiple comma-separated values (like allowed_hosts, csrf_trusted_origins, etc)
def get_list_env(key, default=""):
    return [item.strip() for item in os.getenv(key, default).split(",") if item.strip()]


# Determine environment 
IS_PRODUCTION = os.getenv('DJANGO_PRODUCTION', '').lower() == 'true'
#Set debug value
DEBUG = not IS_PRODUCTION
# ===== Core Security =====
SECURE_SSL_REDIRECT = IS_PRODUCTION  # This should only be True in production (Force HTTPS)


# Base directory (Build paths inside the project like this: BASE_DIR / 'subdir'.)
BASE_DIR = Path(__file__).resolve().parent.parent

# ===== Shared Settings ===== 
SECRET_KEY = os.getenv('SECRET_KEY')

# Dynadot API credentials
DYNADOT_API_KEY = os.getenv('DYNADOT_API_KEY')
DYNADOT_API_SECRET = os.getenv('DYNADOT_API_SECRET')


# Clerk 
CLERK_JWKS_URL = os.getenv("CLERK_JWKS_URL")  
CLERK_ISSUER = os.getenv("CLERK_ISSUER")      
CLERK_AUDIENCE = os.getenv("CLERK_AUDIENCE")  



# CUSTOM SERIALIZERS ACTIVATION
# For dj-rest-auth to use our CustomRegisterSerializer to validate and reject duplicate emails before the User object is created.
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'api.serializers.CustomRegisterSerializer',
}
# For dj-rest-auth to use our CustomRegisterSerializer to validate and reject duplicate emails before the User object is created.
REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'api.serializers.CustomLoginSerializer',
}





# SimpleJWT settings
# SIMPLE_JWT = {
#     'AUTH_HEADER_TYPES': ('Bearer',), # Fallback for non-cookie clients
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
#     'ROTATE_REFRESH_TOKENS': True,
#     'BLACKLIST_AFTER_ROTATION': True,

#     # These are crucial for cookie-based auth
#     'AUTH_COOKIE': 'access_token',
#     'AUTH_COOKIE_REFRESH': 'refresh_token',
#     'AUTH_COOKIE_HTTP_ONLY': True,
#     'AUTH_COOKIE_SECURE': True,
#     'AUTH_COOKIE_SAMESITE': 'None',
#     'AUTH_COOKIE_PATH': '/',
# }


# Rest-auth settings
REST_AUTH = { #used to be named 'DJ_REST_AUTH'
    'USE_JWT': True,  # enables JWT usage
    'JWT_AUTH_COOKIE': 'access_cookie',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh_cookie',
    'JWT_AUTH_HTTPONLY': True, # Block JS access to JWT cookies
    # 'JWT_AUTH_SECURE': True, #HTTPS-only JWT cookies (True in production)
    'JWT_AUTH_SAMESITE': 'None',
    'JWT_AUTH_COOKIE_USE_CSRF': True,  # True in production
    'TOKEN_MODEL': None,  # disables DRF token model
    'JWT_AUTH_RETURN_EXPIRATION': False,  # Stop sending tokens in JSON
    
}


# CSRF settings 
# CSRF_COOKIE_SECURE = True  # True in production
CSRF_COOKIE_SAMESITE = 'None'  
# CSRF_TRUSTED_ORIGINS = [ #Add 'http://localhost:3000' for dev
#     'https://www.aitracker.io', 
#     'https://aitracker.io', 
#     'https://api.aitracker.io' 
# ] 
CSRF_COOKIE_HTTPONLY = False  # Allow JS to read CSRF token (needed for APIs)

#CORS settings
CORS_ALLOW_CREDENTIALS = True # Required for cookies
CORS_EXPOSE_HEADERS = ['X-CSRFToken'] # Let frontend read CSRF header
CORS_ALLOWED_ORIGINS = get_list_env("DJANGO_CORS_ALLOWED_ORIGINS")


# Sessions (Required for Admin)
# SESSION_COOKIE_SECURE = True #Forces HTTPS for admin sessions
SESSION_COOKIE_HTTPONLY=True #Blocks JS from reading sessionid
SESSION_COOKIE_SAMESITE ='Lax' #prevent CSRF attacks (Balanced security for admin)
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Faster sessions
SESSION_COOKIE_NAME = 'admin_sessionid'  # Distinct from JWT cookies


#========DYNAMIC ENVRIONMENT CHECKS ================
#Dynamically switching allowed hosts values based on the value of Debug
if DEBUG:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
else:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")


# ===== Environment-Specific Overrides =====
if IS_PRODUCTION:
    # Production-only settings
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    REST_AUTH['JWT_AUTH_SECURE'] = True
    CSRF_TRUSTED_ORIGINS = get_list_env("DJANGO_CSRF_TRUSTED_ORIGINS")
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True
else:
    # Development-only settings
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    REST_AUTH['JWT_AUTH_SECURE'] = False
    CSRF_TRUSTED_ORIGINS = get_list_env("DJANGO_CSRF_TRUSTED_ORIGINS")








INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
 

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    #'rest_framework.authtoken', #Not in use. 
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'django.contrib.sites',  # Required for allauth
    'dj_rest_auth.registration',
    'django_filters',
    'django_celery_beat',

    #My app
    'api.apps.ApiConfig',
]


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.authentication.ClerkJWTAuthentication', #my custom auth class defined in authentication.py 
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # Change to `AllowAny` for open access
    ),
    'DEFAULT_THROTTLE_RATES': {
        'post_request': '2/day',  # Allow 2 POST requests per day
    },
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}



AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',  # Required by django-allauth
    'django.contrib.auth.backends.ModelBackend',            # Default
)


#Allauth (deprecated fields are commented out)
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = [
    'username*', 
    'email*',        # Required email
    'password1*',    # Required password
    'password2*'     # Required password confirmation
]
ACCOUNT_UNIQUE_EMAIL = True  # Crucial for email-as-username functionality
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1


ACCOUNT_EMAIL_CONFIRMATION_TEMPLATE = "account/email/email_confirmation_message.html"
ACCOUNT_EMAIL_SUBJECT_TEMPLATE = "account/email/email_confirmation_subject.txt"
ACCOUNT_EMAIL_CONTENT_SUBTYPE = "html"


#Site ID
SITE_ID = 1
# Ensures email use HTTPS
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"


#Email Backend for Postmark
# Use custom Postmark API backend for sending emails:
EMAIL_BACKEND = 'api.postmark_backend.EmailBackend'

# Where the Postmark API token is stored (already in your .env):
POSTMARK_API_TOKEN = os.getenv('POSTMARK_API_TOKEN')

# Default "From" email address (also from .env):
DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')

DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')


# Redirect for confirmation page (NOT IN USE ANYMORE BECAUSE WE OVERRODE ALLAUTH DEFUALT CONFIRMATION VIEW DUE TO A TEMPLATE RENDERING ERROR)
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'http://127.0.0.1:3000/email-confirmed'
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'http://127.0.0.1:3000/email-confirmed'


#Google Login (Allauth) - Now handles by Clerk
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'APP': {
#             'client_id': os.getenv('GOOGLE_CLOUD_CLIENT_ID'),
#             'secret': os.getenv('GOOGLE_CLOUD_SECRET'),
#             'key': ''
#         },
#         'SCOPE': ['profile', 'email'],
#         'AUTH_PARAMS': {'access_type': 'online'},
#         # Needed to customize usernames:
#         'USER_FIELDS': ['email', 'username'],
#     }
# }

# # Required for social login
# SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
# SOCIALACCOUNT_EMAIL_REQUIRED = False
# SOCIALACCOUNT_QUERY_EMAIL = True

# A custom pipeline to handle usernames during Google authentication
SOCIALACCOUNT_ADAPTER = 'api.adapters.CustomSocialAccountAdapter'



#Pointing Allauth to use the custom adapter for activating a user's account on email confirmation
ACCOUNT_ADAPTER = 'api.adapters.MyAccountAdapter'


#Additional Security 
SECURE_HSTS_SECONDS = 3600  # Tells browsers to only use HTTPS for your domain for the specified duration (e.g., 3600 = 1 hour starting small for testing).
SECURE_HSTS_INCLUDE_SUBDOMAINS = True #Applies that rule to all subdomains too (like api.example.com).
SECURE_HSTS_PRELOAD = True #Lets you opt-in to browser preload lists (Chrome, Firefox, etc.) to always enforce HTTPS.


MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Required for admin
    'allauth.account.middleware.AccountMiddleware', #Required by allauth
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'nametrackerapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Helps Django to look in my templates folder for email structure
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nametrackerapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv("DATABASE_URL"),
        conn_max_age=600,
        ssl_require=True
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' #for WhiteNoise compression



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#
CACHES = {
    'default' : {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# CELERY SETTINGS
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Points to Redis running in Docker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# CELERY BEAT SETTINGS
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Logging Setup
LOGGING_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)

LOG_LEVEL = 'DEBUG' if DEBUG else 'WARNING'
SENSITIVE_VARIABLES = ['password', 'token', 'secret']



LOG_LEVEL = 'WARNING' if not DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },

    'handlers': {
        # ✅ Domain task logs (rotated)
        'domain_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'domain_tasks.log'),
            'maxBytes': 3 * 1024 * 1024,  # 3 MB
            'backupCount': 3,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        # ✅ General system logs (warnings and above)
        'system_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'aitracker.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },

    'loggers': {
        # ✅ For Django system errors (500s, etc.)
        'django': {
            'handlers': ['system_file', 'console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        # ✅ Your app-specific task logs
        'api.domain_tasks': {
            'handlers': ['domain_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

