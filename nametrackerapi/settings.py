"""
Django settings for nametrackerapi project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
import os
import json
from dotenv import load_dotenv
import logging
from logging.handlers import RotatingFileHandler
from corsheaders.defaults import default_headers

#location for json uploads
from pathlib import Path

# For celery
from celery.schedules import crontab

# For Sentry
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration


# Load environment variables from .env file
load_dotenv()

# Base directory definition
BASE_DIR = Path(__file__).resolve().parent.parent

# Ensuirng all DateTimeFields in the database will store values in UTC. Can be converted to local time when displaying them to users.
USE_TZ = True

# Helper function to parse environment variables that contain multiple comma-separated values (like allowed_hosts, csrf_trusted_origins, etc)
def get_list_env(key, default=""):
    return [item.strip() for item in os.getenv(key, default).split(",") if item.strip()]


# Determine environment 
IS_PRODUCTION = os.getenv('DJANGO_PRODUCTION', '').lower() == 'true'
#Set debug value
DEBUG = not IS_PRODUCTION
# ===== Core Security =====
SECURE_SSL_REDIRECT = IS_PRODUCTION  # This should only be True in production (Force HTTPS)

# Task constants
DOMAIN_BATCH_SIZE = 50 # Upper limit per batch
DOMAIN_BULK_CHUNK = 50 # Upper limit per batch


# ===== Shared Settings ===== 
SECRET_KEY = os.getenv('SECRET_KEY')

# Domain Availability Check API credentials
RAPIDAPI_URL= os.getenv('RAPIDAPI_URL')
RAPIDAPI_HOST = os.getenv('RAPIDAPI_HOST')
RAPIDAPI_KEY = os.getenv('RAPIDAPI_KEY')


# CSRF settings 
# CSRF_COOKIE_SECURE = True  # True in production
CSRF_COOKIE_PATH = '/'
CSRF_COOKIE_SAMESITE = 'Lax'  
# CSRF_TRUSTED_ORIGINS = [ #Add 'http://localhost:3000' for dev
#     'https://www.aitracker.io', 
#     'https://aitracker.io', 
#     'https://api.aitracker.io' 
# ] 
CSRF_COOKIE_HTTPONLY = False  # Allow JS to read CSRF token (needed for APIs)
CSRF_USE_SESSIONS = False


 
#CORS settings
CORS_ALLOW_CREDENTIALS = True # Required for cookies
CORS_ALLOWED_ORIGINS = get_list_env("DJANGO_CORS_ALLOWED_ORIGINS")
CORS_ALLOW_HEADERS = [
    *default_headers,  # This unpacks the default headers
    'authorization',
    'content-type',
    'x-csrftoken',
]
CORS_EXPOSE_HEADERS = ['X-CSRFToken'] # Let frontend read CSRF header




# Sessions (Required for Admin)
# SESSION_COOKIE_SECURE = True #Forces HTTPS for admin sessions
SESSION_COOKIE_HTTPONLY=True #Blocks JS from reading sessionid
SESSION_COOKIE_SAMESITE ='Lax' #prevent CSRF attacks (Balanced security for admin)
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Faster sessions
SESSION_COOKIE_NAME = 'admin_sessionid'  # Distinct from JWT cookies


#========DYNAMIC ENVRIONMENT CHECKS ================
#Dynamically switching allowed hosts values based on the value of Debug
if DEBUG:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
else:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")


# ===== Environment-Specific Overrides =====
if IS_PRODUCTION:
    # Production-only settings
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = get_list_env("DJANGO_CSRF_TRUSTED_ORIGINS")
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True
else:
    # Development-only settings
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    CSRF_TRUSTED_ORIGINS = get_list_env("DJANGO_CSRF_TRUSTED_ORIGINS")



INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django.contrib.sites',  # Required for allauth
    'django_filters',
    'django_celery_beat',
    #My app
    'api.apps.ApiConfig',
]


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.authentication.ClerkJWTAuthentication', #my custom auth class defined in authentication.py 
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated", 
    ),
    'DEFAULT_THROTTLE_CLASSES': [],
    'DEFAULT_THROTTLE_RATES': {
        'post_request': '5/day',  # Allow 5 POST requests per day for public submissions
        # 'anon': '10000/day',  # basically unlimited
    },
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}
 


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',            # Default
)


APPEND_SLASH = False

# For is_top_rated flag on the Name model
TOP_RATED_THRESHOLD = 8



#Site ID
SITE_ID = 1

# Ensures email use HTTPS
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"


#Email Backend for Postmark
EMAIL_BACKEND = 'api.postmark_backend.EmailBackend' # Use custom Postmark API backend for sending emails:

# Where the Postmark API token is stored (already in .env):
POSTMARK_API_TOKEN = os.getenv('POSTMARK_API_TOKEN')

# Default "From" email address (also from .env):
DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')

DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')



#Additional Security 
SECURE_HSTS_SECONDS = 3600  # Tells browsers to only use HTTPS for your domain for the specified duration (e.g., 3600 = 1 hour starting small for testing).
SECURE_HSTS_INCLUDE_SUBDOMAINS = True #Applies that rule to all subdomains too (like api.example.com).
SECURE_HSTS_PRELOAD = True #Lets you opt-in to browser preload lists (Chrome, Firefox, etc.) to always enforce HTTPS.


# Session settings
SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware', # Required for admin
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'nametrackerapi.middleware.SessionTimeoutMiddleware',
]



ROOT_URLCONF = 'nametrackerapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Helps Django to look in my templates folder for email structure
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nametrackerapi.wsgi.application'


# Database
if os.getenv("DATABASE_URL"):
    DATABASES = {
        "default": dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
            ssl_require=True
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("LOCAL_DB_NAME"),
            "USER": os.getenv("LOCAL_DB_USER"),
            "PASSWORD": os.getenv("LOCAL_DB_PASSWORD"),
            "HOST": os.getenv("LOCAL_DB_HOST"),
            "PORT": os.getenv("LOCAL_DB_PORT"),
            "CONN_MAX_AGE": 600,
        }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Time settings
TIME_ZONE = 'UTC'
USE_TZ = True

# Interationalization
USE_I18N = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' #for WhiteNoise compression


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REDIS_URL = os.getenv("REDIS_URL")

#Cache settings
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}



# CELERY SETTINGS
# Enhanced Celery Settings
CELERY_BROKER_URL = f"{REDIS_URL}/0"  # DB 0 for broker
CELERY_RESULT_BACKEND = f"{REDIS_URL}/1"  # DB 1 for results

# Connection settings
CELERY_BROKER_POOL_LIMIT = 20
CELERY_BROKER_CONNECTION_TIMEOUT = 30
CELERY_RESULT_BACKEND_MAX_RETRIES = 3


# Worker settings
CELERY_WORKER_CONCURRENCY = 1 # 8vCPU - 2 for overhead
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Fair task distribution
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100 # Prevent memory leaks
CELERY_WORKER_DISABLE_RATE_LIMITS = True

# Task settings
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes global
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60 # 25 minutes soft
CELERY_TASK_DEFAULT_RETRY_DELAY = 60 # 1 minute
CELERY_TASK_MAX_RETRIES = 3
CELERY_TASK_REJECT_ON_WORKER_LOST = True  # Prevents half-processed tasks
CELERY_TASK_IGNORE_RESULT = True  # Default to False, override per task
CELERY_TASK_STORE_ERRORS_EVEN_IF_IGNORED = True


# Beat settings
CELERY_BEAT_SCHEDULE = {}  # Empty dict to prevent conflicts
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_MAX_LOOP_INTERVAL = 300  # Check for new tasks every 5 mins


# Sentry
sentry_sdk.init(
    dsn=os.getenv("dsn") ,
    integrations=[CeleryIntegration()],
    traces_sample_rate=0.2  # Adjustable for performance monitoring
)


# Clerk 
CLERK_JWKS_URL=os.getenv("CLERK_JWKS_URL") 
CLERK_ISSUER=os.getenv("CLERK_ISSUER")      
CLERK_AUDIENCE=os.getenv("CLERK_AUDIENCE") or None
CLERK_API_BASE_URL = os.getenv("CLERK_API_BASE_URL")
CLERK_SECRET_KEY = os.getenv("CLERK_SECRET_KEY")



# Upload directory
UPLOAD_DIR = BASE_DIR / 'uploads' if DEBUG else Path('/mnt/data/uploads')
os.makedirs(UPLOAD_DIR, exist_ok=True)  # Ensure directory exists


# Validator for json uploads
MAX_UPLOAD_SIZE = 2 * 1024 * 1024  # 2MB in bytes


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# Logging Setup
LOGGING_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)

LOG_LEVEL = 'DEBUG' if DEBUG else 'WARNING'
SENSITIVE_VARIABLES = ['password', 'token', 'secret']



LOG_LEVEL = 'WARNING' if not DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },

    'handlers': {
        # ✅ Domain task logs (rotated)
        'domain_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'domain_tasks.log'),
            'maxBytes': 3 * 1024 * 1024,  # 3 MB
            'backupCount': 3,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        # ✅ General system logs (warnings and above)
        'system_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'aitracker.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        'celery': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/celery_tasks.log',
            'filename': os.path.join(LOGGING_DIR, 'celery_tasks.log'),
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'DEBUG',  # <- change from WARNING to DEBUG (Remove later as it's for seeing debug errors in the console during dev)
        },
    },

    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # <- important (Remove block entirely later as it's for seeing debug errors in the console during dev))
    },

    'loggers': {
        # ✅ For Django system errors (500s, etc.)
        'django': {
            'handlers': ['system_file', 'console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        # ✅ Your app-specific task logs
        'api.domain_tasks': {
            'handlers': ['domain_file', 'console', 'celery'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}