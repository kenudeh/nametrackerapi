"""
Django settings for nametrackerapi project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
import os
import json
from dotenv import load_dotenv
import logging
from logging.handlers import RotatingFileHandler



# Load environment variables from .env file
load_dotenv()


# Dynadot API credentials
DYNADOT_API_KEY = os.getenv('DYNADOT_API_KEY')
DYNADOT_API_SECRET = os.getenv('DYNADOT_API_SECRET')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

#Dynamically switching allowed hosts values based on the value of Debug
if DEBUG:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '127.0.0.1:8000']
else:
    ALLOWED_HOSTS = ['nametrackerapi-production.up.railway.app', 'api.aitracker.io']

# Needed if we ever switch to full environment controll
# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', #Not in use. Added to prevent the error with dj_rest
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_filters',
    'django_celery_beat',

    #My app
    'api.apps.ApiConfig',
]


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication', #Switched away from JWTAuthentication
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # Change to `IsAuthenticated` for stricter access
    ),
    'DEFAULT_THROTTLE_RATES': {
        'post_request': '2/day',  # Allow 2 POST requests per day
    },
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

#DJ Rest Auth
REST_USE_JWT = True

DJ_REST_AUTH = {
    'USE_JWT': True,
    'TOKEN_MODEL': None,
}

#Allauth (deprecated fields are commented out)
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = [
    'username*', 
    'email*',        # Required email
    'password1*',    # Required password
    'password2*'     # Required password confirmation
]
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# For dj-rest-auth to use our CustomRegisterSerializer to validate and reject duplicate emails before the User object is created.
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'api.serializers.CustomRegisterSerializer',
}


#Site ID
SITE_ID = 1
# Ensures email use HTTPS
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"


#Email Backend for Postmark
# Use custom Postmark API backend for sending emails:
EMAIL_BACKEND = 'api.postmark_backend.EmailBackend'

# Where the Postmark API token is stored (already in your .env):
POSTMARK_API_TOKEN = os.getenv('POSTMARK_API_TOKEN')

# Default "From" email address (also from .env):
DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')

DEFAULT_FROM_EMAIL = os.getenv('POSTMARK_DEFAULT_FROM_EMAIL')


# Redirect for confirmation page (NOT IN USE ANYMORE BECAUSE WE OVERRODE ALLAUTH DEFUALT CONFIRMATION VIEW DUE TO A TEMPLATE RENDERING ERROR)
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'http://127.0.0.1:3000/email-confirmed'
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'http://127.0.0.1:3000/email-confirmed'


#Google Login (Allauth)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'YOUR_GOOGLE_CLIENT_ID',
            'secret': 'YOUR_GOOGLE_CLIENT_SECRET',
            'key': ''
        }
    }
}


#Pointing Allauth to use the custom adapter for activating a user's account on email confirmation
ACCOUNT_ADAPTER = 'api.adapters.MyAccountAdapter'



MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware', #Required by allauth
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # For local development 
    "http://127.0.0.1:3000",
    "https://www.aitracker.io",  # My frontend URL
    "https://aitracker.io",  # My frontend URL
]


ROOT_URLCONF = 'nametrackerapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Helps Django to look in my templates folder for email structure
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nametrackerapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv("DATABASE_URL"),
        conn_max_age=600,
        ssl_require=True
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
#
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#
CACHES = {
    'default' : {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# CELERY SETTINGS
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Points to Redis running in Docker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# CELERY BEAT SETTINGS
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Logging Setup
LOGGING_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)

LOG_LEVEL = 'DEBUG' if DEBUG else 'WARNING'
SENSITIVE_VARIABLES = ['password', 'token', 'secret']



LOG_LEVEL = 'WARNING' if not DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },

    'handlers': {
        # ✅ Domain task logs (rotated)
        'domain_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'domain_tasks.log'),
            'maxBytes': 3 * 1024 * 1024,  # 3 MB
            'backupCount': 3,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        # ✅ General system logs (warnings and above)
        'system_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'aitracker.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },

    'loggers': {
        # ✅ For Django system errors (500s, etc.)
        'django': {
            'handlers': ['system_file', 'console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        # ✅ Your app-specific task logs
        'api.domain_tasks': {
            'handlers': ['domain_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

