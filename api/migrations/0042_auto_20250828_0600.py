# Generated by you: cleanup and restore periodic tasks
from django.db import migrations
from datetime import time
import json

# Keep the same DROP_TIMES used previously:
DROP_TIMES = {
    'com': time(19, 0),
    'co': time(22, 0),
    'io': time(0, 30),
    'ai': time(22, 0),
}

def cleanup_and_restore_periodic_tasks(apps, schema_editor):
    CrontabSchedule = apps.get_model("django_celery_beat", "CrontabSchedule")
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")

    # 1) Remove legacy 'pending_transitions_*' by name
    PeriodicTask.objects.filter(name__startswith='pending_transitions_').delete()

    # 2) Remove any tasks that still point to the old function name
    PeriodicTask.objects.filter(task='api.tasks.transition_pending_to_deleted_task').delete()

    # 3) Deduplicate any PeriodicTask rows by name â€” keep the lowest id (oldest)
    from django.db.models import Count
    duplicates = PeriodicTask.objects.values('name').annotate(cnt=Count('id')).filter(cnt__gt=1)
    for d in duplicates:
        name = d['name']
        ids = list(PeriodicTask.objects.filter(name=name).order_by('id').values_list('id', flat=True))
        # keep first, delete the rest
        if len(ids) > 1:
            PeriodicTask.objects.filter(id__in=ids[1:]).delete()

    # 4) Re-create/ensure desired schedules (idempotent: update_or_create by name)
    schedules = [
        {
            "name": "midnight_transition",
            "task": "api.tasks.transition_pending_to_deleting_today_task",
            "crontab": {"hour": 0, "minute": 0},
        },
        {
            "name": "update_idea_of_the_day",
            "task": "api.tasks.update_idea_of_the_day",
            "crontab": {"hour": 0, "minute": 30},
        },
        {
            "name": "availability_checks",
            "task": "api.tasks.trigger_bulk_availability_check_task",
            "crontab": {"hour": "*/6", "minute": 0},
        },
        {
            "name": "domain_rechecks",
            "task": "api.tasks.second_check_task",
            "crontab": {"hour": "*/12", "minute": 30},
        },
        {
            "name": "daily_maintenance",
            "task": "api.tasks.daily_maintenance_task",
            "crontab": {"hour": 2, "minute": 0},
        },
        {
            "name": "file_processing",
            "task": "api.tasks.process_pending_files",
            "crontab": {"hour": 3, "minute": 0},
        },
    ]

    # add the per-TLD deleting_to_deleted_* entries
    for tld, drop in DROP_TIMES.items():
        schedules.append({
            "name": f"deleting_to_deleted_{tld}",
            "task": "api.tasks.transition_deleting_today_to_deleted_task",
            "crontab": {"hour": drop.hour, "minute": drop.minute},
            "kwargs": json.dumps({"tld": tld}),
        })

    for cfg in schedules:
        # create/get matching crontab schedule
        schedule, _ = CrontabSchedule.objects.get_or_create(
            minute=str(cfg["crontab"].get("minute", "*")),
            hour=str(cfg["crontab"].get("hour", "*")),
            day_of_week=str(cfg["crontab"].get("day_of_week", "*")),
            day_of_month=str(cfg["crontab"].get("day_of_month", "*")),
            month_of_year=str(cfg["crontab"].get("month_of_year", "*")),
            timezone="UTC",
        )

        PeriodicTask.objects.update_or_create(
            name=cfg["name"],
            defaults={
                "task": cfg["task"],
                "crontab": schedule,
                "enabled": True,
                "expires": None,
                "kwargs": cfg.get("kwargs", "{}"),
            }
        )

def noop_reverse(apps, schema_editor):
    # Do nothing for reverse (safe no-op). You can change if you want an undo.
    return

class Migration(migrations.Migration):
    dependencies = [
        ('api', '0041_auto_20250828_0500'),
        ("django_celery_beat", "0016_alter_crontabschedule_timezone"),
    ]

    operations = [
        migrations.RunPython(cleanup_and_restore_periodic_tasks, noop_reverse),
    ]