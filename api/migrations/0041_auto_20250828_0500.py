# Generated by Django 5.2.5 on 2025-08-28 12:00

from django.db import migrations
from datetime import time
import json


# Drop times per TLD (UTC)
DROP_TIMES = {
    'com': time(19, 0),
    'co': time(22, 0),
    'io': time(0, 30),
    'ai': time(22, 0),
}



def create_periodic_tasks(apps, schema_editor):
    CrontabSchedule = apps.get_model("django_celery_beat", "CrontabSchedule")
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")

    schedules = [
        # Midnight transition
        {
            "name": "midnight_transition",
            "task": "api.tasks.transition_pending_to_deleting_today_task",
            "crontab": {"hour": 0, "minute": 0},
        },
        # Update IdeaOfTheDay at 00:30
        {
            "name": "update_idea_of_the_day",
            "task": "api.tasks.update_idea_of_the_day",
            "crontab": {"hour": 0, "minute": 30},
        },
        # Bulk availability checks every 6 hours
        {
            "name": "availability_checks",
            "task": "api.tasks.trigger_bulk_availability_check_task",
            "crontab": {"hour": "*/6", "minute": 0},
        },
        # Domain rechecks every 12 hours at :30
        {
            "name": "domain_rechecks",
            "task": "api.tasks.second_check_task",
            "crontab": {"hour": "*/12", "minute": 30},
        },
        # Daily maintenance at 02:00 UTC
        {
            "name": "daily_maintenance",
            "task": "api.tasks.daily_maintenance_task",
            "crontab": {"hour": 2, "minute": 0},
        },
        # File processing at 03:00 UTC
        {
            "name": "file_processing",
            "task": "api.tasks.process_pending_files",
            "crontab": {"hour": 3, "minute": 0},
        },
    ]

    # Add per-TLD transition tasks (deleting_today -> deleted)
    for tld, drop in DROP_TIMES.items():
        schedules.append({
            "name": f"deleting_to_deleted_{tld}",
            "task": "api.tasks.transition_deleting_today_to_deleted_task",
            "crontab": {"hour": drop.hour, "minute": drop.minute},
            "kwargs": json.dumps({"tld": tld}),
        })

    for config in schedules:
        # Create or update crontab schedule
        schedule, _ = CrontabSchedule.objects.get_or_create(
            minute=str(config["crontab"].get("minute", "*")),
            hour=str(config["crontab"].get("hour", "*")),
            day_of_week=str(config["crontab"].get("day_of_week", "*")),
            day_of_month=str(config["crontab"].get("day_of_month", "*")),
            month_of_year=str(config["crontab"].get("month_of_year", "*")),
            timezone="UTC",
        )

        # Create or update periodic task
        PeriodicTask.objects.update_or_create(
            name=config["name"],
            defaults={
                "task": config["task"],
                "crontab": schedule,
                "enabled": True,
                "expires": None,
                "kwargs": config.get("kwargs", "{}"),
            },
        )

def remove_periodic_tasks(apps, schema_editor):
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")
    task_names = [
        "midnight_transition",
        "update_idea_of_the_day",
        "availability_checks",
        "domain_rechecks",
        "daily_maintenance",
        "file_processing",
    ] + [f"deleting_to_deleted_{tld}" for tld in DROP_TIMES]

    PeriodicTask.objects.filter(name__in=task_names).delete()



class Migration(migrations.Migration):

    dependencies = [
        ('api', '0040_uploadedfile_domain_list_uploadedfile_drop_date'),
        ("django_celery_beat", "0016_alter_crontabschedule_timezone"),
    ]

    operations = [
        migrations.RunPython(create_periodic_tasks, remove_periodic_tasks),
    ]
